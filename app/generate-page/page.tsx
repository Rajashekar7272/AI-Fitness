"use client";

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useUser } from "@clerk/nextjs";
import {
  Bandage,
  BarChart2,
  Calendar,
  Dumbbell,
  Goal,
  HeartPulse,
  Loader2,
  Ruler,
  User,
  Utensils,
  Weight,
} from "lucide-react";
import { useRouter } from "next/navigation";
import { useState } from "react";
import { motion } from "framer-motion";

const GenerateProgramPage = () => {
  const { user } = useUser();
  const router = useRouter();
  const [inputs, setInputs] = useState({
    age: "",
    height: "",
    weight: "",
    injuries: "",
    workoutDays: "",
    fitnessGoal: "",
    fitnessLevel: "",
    dietaryRestrictions: "",
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setInputs((prev) => ({ ...prev, [name]: value }));
  };

  const handleSelectChange = (name: string, value: string) => {
    setInputs((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async () => {
    setLoading(true);
    setError(null);
    try {
      const prompt = `
You are a certified fitness and nutrition coach. Based on the following client inputs:
Age: ${inputs.age}
Height: ${inputs.height} cm or Feet/Inches
Weight: ${inputs.weight} kg or lbs
Injuries: ${inputs.injuries}
Workout Days Per Week: ${inputs.workoutDays}
Fitness Goal: ${inputs.fitnessGoal}
Fitness Level: ${inputs.fitnessLevel}
Dietary Restrictions: ${inputs.dietaryRestrictions}

Generate a comprehensive fitness and nutrition plan in strict JSON format. The JSON must be valid, with proper commas and closing braces. The response must contain only the JSON object, with no additional characters, text, markdown, backticks, or "json" markers.

The JSON should contain two main keys: 'fitness_plan' and 'nutrition_plan'.

The 'fitness_plan' should include:
- 'weekly_schedule': An object with keys for each workout day (e.g., 'day_1', 'day_2', etc., up to the number of 'Workout Days Per Week'), each containing:
  - 'workout': A string describing the workout details.
  - 'rest': A string describing rest or recovery instructions.
- 'notes': A string with important fitness tips or precautions.

The 'nutrition_plan' should include:
- 'daily_meals': An object with keys for 'breakfast', 'lunch', 'dinner', and 'snacks', each containing:
  - 'description': A string describing the meal.
  - 'protein': A string specifying the protein amount (e.g., "30g").
  - 'carbs': A string specifying the carbohydrate amount (e.g., "50g").
  - 'fats': A string specifying the fat amount (e.g., "15g").
- 'notes': A string with nutritional advice based on the client's dietary restrictions and fitness goal.

Ensure that:
- The workout plan is tailored to the client's fitness level, goals, and injuries.
- Dietary restrictions are strictly followed in the meal plan.
- All property values are strings, and the JSON is syntactically correct.
- Do not include any error messages, explanations, or non-JSON content.
      `;

      const res = await fetch("/api/gemini", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prompt }),
      });

      if (!res.ok) {
        throw new Error(`API request failed with status ${res.status}`);
      }

      const data = await res.json();
      const plan = data.result;

      if (!plan) {
        throw new Error("No result generated by API");
      }

      // Validate JSON before storing
      try {
        JSON.parse(plan);
        console.log("Generated plan:", plan); // Debugging
        sessionStorage.setItem("fitnessPlan", plan);
        router.push("/profile");
      } catch (parseError) {
        console.error("Invalid JSON from API:", plan, parseError);
        throw new Error("Invalid JSON format received from API");
      }
    } catch (err) {
      console.error("Error generating plan:", err);
      setError("Failed to generate program. Please try again.");
      sessionStorage.setItem("fitnessPlan", JSON.stringify({ error: "Failed to generate program" }));
      router.push("/profile");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-5xl mx-auto px-4 py-8">
      <motion.div
        initial={{ opacity: 0, y: 50 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="text-center mb-10"
      >
        <h1 className="text-4xl font-extrabold mb-3 bg-gradient-to-r from-green-500 to-indigo-600 bg-clip-text text-transparent">
          Create Your Personalized Fitness Plan
        </h1>
        <p className="text-gray-500 max-w-2xl mx-auto">
          Answer a few questions to get a customized workout and nutrition plan
          tailored just for you
        </p>
      </motion.div>

      <motion.div
        initial={{ opacity: 0, y: 50 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.2 }}
      >
        <Card className="shadow-lg hover:shadow-xl transition-shadow duration-300 rounded-lg">
          <CardHeader className="flex items-center space-x-2">
            <Dumbbell className="w-6 h-6" />
            <CardTitle className="text-3xl">Personal Details</CardTitle>
          </CardHeader>
          <CardContent className="pt-3">
            {error && (
              <motion.p
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="text-red-500 mb-4 text-center"
              >
                {error}
              </motion.p>
            )}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <motion.div
                className="space-y-2"
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.3, delay: 0.3 }}
              >
                <Label className="flex items-center gap-2">
                  <User size={16} className="text-blue-400" />
                  Age
                </Label>
                <Input
                  type="number"
                  name="age"
                  value={inputs.age}
                  onChange={handleInputChange}
                  placeholder="Enter your age"
                  className="border-gray-300 focus:ring-2 focus:ring-blue-400"
                />
              </motion.div>

              <motion.div
                className="space-y-2"
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.3, delay: 0.4 }}
              >
                <Label className="flex items-center gap-2">
                  <Ruler size={16} className="text-blue-400" />
                  Height (cm or Feet/Inches)
                </Label>
                <Input
                  type="text"
                  name="height"
                  value={inputs.height}
                  onChange={handleInputChange}
                  placeholder="e.g., 170 cm or 5'7"
                  className="border-gray-300 focus:ring-2 focus:ring-blue-400"
                />
              </motion.div>

              <motion.div
                className="space-y-2"
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.3, delay: 0.5 }}
              >
                <Label className="flex items-center gap-2">
                  <Weight size={16} className="text-blue-400" />
                  Weight (kg or lbs)
                </Label>
                <Input
                  type="text"
                  name="weight"
                  value={inputs.weight}
                  onChange={handleInputChange}
                  placeholder="e.g., 70 kg or 150 lbs"
                  className="border-gray-300 focus:ring-2 focus:ring-blue-400"
                />
              </motion.div>

              <motion.div
                className="space-y-2"
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.3, delay: 0.6 }}
              >
                <Label className="flex items-center gap-2">
                  <Bandage size={16} className="text-blue-400" />
                  Injuries
                </Label>
                <Select
                  value={inputs.injuries}
                  onValueChange={(value) => handleSelectChange("injuries", value)}
                >
                  <SelectTrigger className="border-gray-300 focus:ring-2 focus:ring-blue-400">
                    <SelectValue placeholder="Select injury if any" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="None">None</SelectItem>
                    <SelectItem value="Leg injury">Leg injury</SelectItem>
                    <SelectItem value="Hand injury">Hand injury</SelectItem>
                    <SelectItem value="Back pain">Back pain</SelectItem>
                    <SelectItem value="Shoulder strain">Shoulder strain</SelectItem>
                  </SelectContent>
                </Select>
              </motion.div>

              <motion.div
                className="space-y-2"
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.3, delay: 0.7 }}
              >
                <Label className="flex items-center gap-2">
                  <Calendar size={16} className="text-blue-400" />
                  Workout Days/Week
                </Label>
                <Input
                  type="number"
                  name="workoutDays"
                  value={inputs.workoutDays}
                  onChange={handleInputChange}
                  placeholder="Days per week (1-7)"
                  min="1"
                  max="7"
                  className="border-gray-300 focus:ring-2 focus:ring-blue-400"
                />
              </motion.div>

              <motion.div
                className="space-y-2"
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.3, delay: 0.8 }}
              >
                <Label className="flex items-center gap-2">
                  <Goal size={16} className="text-blue-400" />
                  Fitness Goal
                </Label>
                <Select
                  value={inputs.fitnessGoal}
                  onValueChange={(value) => handleSelectChange("fitnessGoal", value)}
                >
                  <SelectTrigger className="border-gray-300 focus:ring-2 focus:ring-blue-400">
                    <SelectValue placeholder="Select your goal" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Muscle gain">Muscle gain</SelectItem>
                    <SelectItem value="Six-pack abs">Six-pack abs</SelectItem>
                    <SelectItem value="Chest building">Chest building</SelectItem>
                    <SelectItem value="Weight loss">Weight loss</SelectItem>
                    <SelectItem value="Endurance improvement">Endurance improvement</SelectItem>
                  </SelectContent>
                </Select>
              </motion.div>

              <motion.div
                className="space-y-2"
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.3, delay: 0.9 }}
              >
                <Label className="flex items-center gap-2">
                  <BarChart2 size={16} className="text-blue-400" />
                  Fitness Level
                </Label>
                <Select
                  value={inputs.fitnessLevel}
                  onValueChange={(value) => handleSelectChange("fitnessLevel", value)}
                >
                  <SelectTrigger className="border-gray-300 focus:ring-2 focus:ring-blue-400">
                    <SelectValue placeholder="Select your level" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Beginner">Beginner</SelectItem>
                    <SelectItem value="Intermediate">Intermediate</SelectItem>
                    <SelectItem value="Advanced">Advanced</SelectItem>
                  </SelectContent>
                </Select>
              </motion.div>

              <motion.div
                className="space-y-2"
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.3, delay: 1.0 }}
              >
                <Label className="flex items-center gap-2">
                  <Utensils size={16} className="text-blue-400" />
                  Dietary Restrictions
                </Label>
                <Select
                  value={inputs.dietaryRestrictions}
                  onValueChange={(value) => handleSelectChange("dietaryRestrictions", value)}
                >
                  <SelectTrigger className="border-gray-300 focus:ring-2 focus:ring-blue-400">
                    <SelectValue placeholder="Select restrictions" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="None">None</SelectItem>
                    <SelectItem value="Vegetarian">Vegetarian</SelectItem>
                    <SelectItem value="Non-vegetarian">Non-vegetarian</SelectItem>
                    <SelectItem value="Vegan">Vegan</SelectItem>
                    <SelectItem value="Food allergies">Food allergies</SelectItem>
                    <SelectItem value="Lactose intolerant">Lactose intolerant</SelectItem>
                    <SelectItem value="Gluten-free">Gluten-free</SelectItem>
                  </SelectContent>
                </Select>
              </motion.div>
            </div>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: 1.1 }}
            >
              <Button
                onClick={handleSubmit}
                disabled={loading}
                className="w-full mt-6 py-6 text-lg bg-green-600 text-black"
                size="lg"
              >
                {loading ? (
                  <>
                    <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                    Generating Your Plan...
                  </>
                ) : (
                  <>
                    <HeartPulse className="mr-2 h-5 w-5" />
                    Generate My Fitness Plan with AI
                  </>
                )}
              </Button>
            </motion.div>
          </CardContent>
        </Card>
      </motion.div>
    </div>
  );
};

export default GenerateProgramPage;